---
- name: "Grafana: ensure directory"
  become: true
  ansible.builtin.file:
    path: /opt/grafana
    state: directory
    owner: nobody
    mode: ug=rwx,o=rx

- name: "Create a dhparams file"
  become: true
  community.crypto.openssl_dhparam:
    path: /etc/ssl/certs/dhparam.pem
    size: 2048

- name: "Firewall: Allow HTTP(S)"
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
  loop:
    - http
    - https

- name: "Install HTTPS/Nginx Reverse Proxy"
  become: true
  block:
    - name: "Install certbox and nginx"
      ansible.builtin.include_role:
        name: "{{ item }}"
      loop:
        - geerlingguy.certbot
        - geerlingguy.nginx
      vars:
        certbot_admin_email: "{{ ixp_primary_tech_contact_email }}"
        certbot_create_if_missing: true
        certbot_create_standalone_stop_services: ["nginx.service"]
        certbot_certs:
          - domains:
              - "{{ grafana_domain }}"
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - listen: "80"
            server_name: "_"
            return: "301 https://$host$request_uri"
          - listen: "443 ssl http2"
            server_name: "{{ grafana_domain }}"
            extra_parameters: |
              ssl_certificate /etc/letsencrypt/live/{{ grafana_domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ grafana_domain }}/privkey.pem;
              ssl_dhparam /etc/ssl/certs/dhparam.pem;
              location / {
                proxy_pass http://127.0.0.1:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }

- name: "Grafana: run grafana/grafana container"
  community.docker.docker_container:
    name: grafana
    image: grafana/grafana:10.2.3
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - /opt/grafana:/var/lib/grafana
    user: nobody
    env:
      GF_INSTALL_PLUGINS: "esnet-matrix-panel,knightss27-weathermap-panel"
      GF_LIVE_ALLOWED_ORIGINS: "https://{{ grafana_domain }}"
      GF_SECURITY_ADMIN_PASSWORD: "{{ grafana_admin_password }}"
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SERVER_DOMAIN: "{{ grafana_domain }}"
      GF_SERVER_HTTP_PORT: "3000"
      GF_SERVER_ROOT_URL: "https://{{ grafana_domain }}"

- name: "Grafana Loki: Create directory"
  become: true
  ansible.builtin.file:
    path: /opt/loki
    state: directory
    owner: 10001
    group: 10001
    mode: ug=rwx,o=rx
- name: "Grafana Loki: Template loki-config.yaml"
  become: true
  ansible.builtin.template:
    src: loki-config.yaml.j2
    dest: /opt/loki/loki-config.yaml
    owner: 10001
    group: 10001
    mode: ug=rw,o=r
  notify: "Restart loki docker container"
- name: "Grafana Loki: Template promtail-config.yaml"
  become: true
  ansible.builtin.template:
    src: promtail-config.yaml.j2
    dest: /opt/loki/promtail-config.yaml
    owner: 10001
    group: 10001
    mode: ug=rw,o=r
  notify: "Restart promtail docker container"
- name: "Grafana Loki: Template syslog-ng.conf"
  become: true
  ansible.builtin.template:
    src: syslog-ng.conf.j2
    dest: /opt/loki/syslog-ng.conf
    owner: root
    group: root
    mode: ug=rw,o=r
  notify: "Restart syslog-ng docker container"
- name: "Grafana Loki: Run loki"
  become: true
  community.docker.docker_container:
    name: loki
    image: "{{ grafana_loki_image }}"
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - /opt/loki:/opt/loki
    command: "-config.file=/opt/loki/loki-config.yaml"
- name: "Grafana Loki: Run promtail"
  become: true
  community.docker.docker_container:
    name: promtail
    image: "{{ grafana_promtail_image }}"
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - /opt/loki:/opt/loki
    command: "-config.file=/opt/loki/promtail-config.yaml"
- name: "Grafana Loki: Run syslog-ng"
  become: true
  community.docker.docker_container:
    name: syslog-ng
    image: "{{ grafana_syslog_ng_image }}"
    restart_policy: unless-stopped
    network_mode: host
    volumes:
      - /opt/loki/syslog-ng.conf:/etc/syslog-ng/syslog-ng.conf
